#!/usr/bin/env python
# (c) Copyright 2023 Premier Heart, LLC
# NOTE: This generates random data which is likely to fail analysis and 
#       cause the API server to return an Error object.

import json
import requests
import os
import random
import sys
from datetime import datetime

TOKEN_PATH_KEY = 'MCG_API_TOKEN_FILE'
TOKEN_KEY = 'MCG_API_TOKEN'

def get_api_token():
    if TOKEN_KEY in os.environ:
        return os.environ[TOKEN_KEY]
    elif TOKEN_PATH_KEY in os.environ:
        with open(os.environ[TOKEN_PATH_KEY], 'rb') as f:
            return f.read().strip()
    else:
        raise "Missing token! Set either MCG_API_TOKEN or MCG_API_TOKEN_FILE in environment."

def send_api_request(server_url, token, data):
    header = { 'Authorization': token,
               'Content-Type': 'application/json' }
    response = requests.post(url=server_url, headers=header, json=data)
    return response

def build_empty_request():
    return {
      "object-type": "analysis-request",
      "analysis": {
        "type": "mcg-aggregate",
        "options": {
          "diagnosis-matrix": True
        }
      },
      "output": {
        "report-json": {
        }
      },
      "input": [
      ],
      "comment": "(FAKE DATA) Generated by " + os.path.basename(__file__)
    }

def random_data():
    return random.sample(range(0, (2**16-1)), (512*16))


def build_ecg_input():
    ts = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    return {
      "type": "ecg",
      "format": "json",
      "timestamp": ts,
      "age": 40,
      "gender": "M",
      "data": {
        "frequency": 100,
        "signals": [
            {
            "name": "V5",
            "gain": 500.0,
            "offset": 0,
            "data": random_data(),
          },
          {
            "name": "II",                                                       
            "gain": 500.0,
            "offset": 0,
            "data": random_data(),
          }
        ]
      }
    }

def build_valid_request():
    req = build_empty_request()
    # add three 82-second recordings
    req['input'].append( build_ecg_input() )
    req['input'].append( build_ecg_input() )
    req['input'].append( build_ecg_input() )
    return req

def decode_response(resp):
    if resp.status_code != 200:
        return {
                "object-type": "http-error",
                "timestamp": str(datetime.now),
                "message": "Unknown error: HTTP %d" % resp.status_code
        }
    return json.loads(resp.text)

if __name__ == '__main__':
    url = "https://api.premierheart.com/api/v1/analyze"
    if len(sys.argv) > 1:
        url = sys.argv[1]

    token = get_api_token()
    data = build_valid_request()
    resp = send_api_request(url, token, data)
    results = decode_response(resp)
    if results['object-type'] != 'analysis-result':
        print("Unexpected return value from API server!")
    else:
        print("Analysis Results:")
    for k,v in results.items():
        print("\t%s: %s" % (k, v))
